{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "GetPlanBucketsName": {
      "type": "string",
      "defaultValue": "GetPlanBuckets",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "GetPlanBucketsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "GetGroupPlansName": {
      "type": "string",
      "defaultValue": "GetGroupPlans",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "GetGroupPlansLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "planner_1_Connection_Name": {
      "type": "string",
      "defaultValue": "planner"
    },
    "planner_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "Planner Connection"
    },
    "planner_1_token:TenantId": {
      "type": "string",
      "defaultValue": "subscription().tenantId",
      "metadata": {
        "description": "The tenant ID of for the Azure Active Directory application"
      }
    },
    "azuread_1_Connection_Name": {
      "type": "string",
      "defaultValue": "azuread"
    },
    "azuread_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "Active Directory Read"
    },
    "azuread_1_token:TenantId": {
      "type": "string",
      "defaultValue": "subscription().tenantId",
      "metadata": {
        "description": "The tenant ID of for the Azure Active Directory application"
      }
    },
    "GetPlanDetailsName": {
      "type": "string",
      "defaultValue": "GetPlanDetails",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "GetPlanDetailsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "GetPlanTasksName": {
      "type": "string",
      "defaultValue": "GetPlanTasks",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "GetPlanTasksLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "GetTaskDetailsName": {
      "type": "string",
      "defaultValue": "GetTaskDetail",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "GetTaskDetailsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "GetGroupNameName": {
      "type": "string",
      "defaultValue": "GetGroupName",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "GetGroupNameLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "GetGroupUsersName": {
      "type": "string",
      "defaultValue": "GetGroupUsers",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "GetGroupUsersLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "GetGroupsAndPlansName": {
      "type": "string",
      "defaultValue": "GetGroupsAndPlans",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "GetGroupsAndPlansLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('GetGroupPlansName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('GetGroupPlansLocation')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]"
      ],
      "tags": {
        "displayName": "GetGroupPlans"
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "List_plans_for_a_group": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['planner']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v1.0/groups/@{encodeURIComponent(triggerOutputs()['queries']['groupId'])}/planner/plans"
              },
              "runAfter": {}
            },
            "Response": {
              "type": "Response",
              "kind": "http",
              "inputs": {
                "statusCode": 200,
                "body": "@body('List_plans_for_a_group')"
              },
              "runAfter": {
                "List_plans_for_a_group": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {},
                "method": "GET"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "planner": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetGroupPlansLocation'), '/managedApis/', 'planner')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]",
                "connectionName": "[parameters('planner_1_Connection_Name')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2018-07-01-preview",
      "name": "[parameters('planner_1_Connection_Name')]",
      "location": "[parameters('GetGroupPlansLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetGroupPlansLocation'), '/managedApis/', 'planner')]"
        },
        "displayName": "[parameters('planner_1_Connection_DisplayName')]",
        "nonSecretParameterValues": {
          "token:TenantId": "[parameters('planner_1_token:TenantId')]"
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2018-07-01-preview",
      "name": "[parameters('azuread_1_Connection_Name')]",
      "location": "[parameters('GetGroupNameLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetGroupNameLocation'), '/managedApis/', 'azuread')]"
        },
        "displayName": "[parameters('azuread_1_Connection_DisplayName')]",
        "nonSecretParameterValues": {
          "token:TenantId": "[parameters('azuread_1_token:TenantId')]"
        }
      }
    },
    {
      "name": "[parameters('GetPlanBucketsName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('GetPlanBucketsLocation')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]"
      ],
      "tags": {
        "displayName": "GetPlanBuckets"
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "List_buckets": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['planner']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/v1.0/planner/plans/@{encodeURIComponent(triggerOutputs()['queries']['planId'])}/buckets",
                "queries": {
                  "groupId": "@{triggerOutputs()['queries']['groupId']}"
                }
              },
              "runAfter": {}
            },
            "Response": {
              "type": "Response",
              "kind": "http",
              "inputs": {
                "statusCode": 200,
                "body": "@body('List_buckets')"
              },
              "runAfter": {
                "List_buckets": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {},
                "method": "GET"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "planner": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetPlanBucketsLocation'), '/managedApis/', 'planner')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]",
                "connectionName": "[parameters('planner_1_Connection_Name')]"
              }
            }
          }
        }
      }
    },
    {
      "name": "[parameters('GetPlanDetailsName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('GetPlanDetailsLocation')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]"
      ],
      "tags": {
        "displayName": "GetPlanDetails"
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Response": {
              "type": "Response",
              "kind": "http",
              "inputs": {
                "statusCode": 200,
                "body": "@body('Get_plan_details')"
              },
              "runAfter": {
                "Get_plan_details": [
                  "Succeeded"
                ]
              }
            },
            "Get_plan_details": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['planner']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v1.0/planner/plans/@{encodeURIComponent(triggerOutputs()['queries']['planId'])}/details"
              },
              "runAfter": {}
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {},
                "method": "GET"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "planner": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetPlanDetailsLocation'), '/managedApis/', 'planner')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]",
                "connectionName": "[parameters('planner_1_Connection_Name')]"
              }
            }
          }
        }
      }
    },
    {
      "name": "[parameters('GetPlanTasksName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('GetPlanTasksLocation')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]"
      ],
      "tags": {
        "displayName": "GetPlanTasks"
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "List_tasks": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['planner']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/v1.0/planner/plans/@{encodeURIComponent(triggerOutputs()['queries']['planId'])}/tasks",
                "queries": {
                  "groupId": "@{triggerOutputs()['queries']['groupId']}"
                }
              },
              "runAfter": {}
            },
            "Response": {
              "type": "Response",
              "kind": "http",
              "inputs": {
                "statusCode": 200,
                "body": "@body('List_tasks')"
              },
              "runAfter": {
                "List_tasks": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {},
                "method": "GET"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "planner": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetPlanTasksLocation'), '/managedApis/', 'planner')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]",
                "connectionName": "[parameters('planner_1_Connection_Name')]"
              }
            }
          }
        }
      }
    },
    {
      "name": "[parameters('GetTaskDetailsName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('GetTaskDetailsLocation')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]"
      ],
      "tags": {
        "displayName": "GetTaskDetails"
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Get_task_details": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['planner']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v1.0/planner/tasks/@{encodeURIComponent(triggerOutputs()['queries']['taskId'])}/details"
              },
              "runAfter": {}
            },
            "Response": {
              "type": "Response",
              "kind": "http",
              "inputs": {
                "statusCode": 200,
                "body": "@body('Get_task_details')"
              },
              "runAfter": {
                "Get_task_details": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {},
                "method": "GET"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "planner": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetTaskDetailsLocation'), '/managedApis/', 'planner')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]",
                "connectionName": "[parameters('planner_1_Connection_Name')]"
              }
            }
          }
        }
      }
    },
    {
      "name": "[parameters('GetGroupNameName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('GetGroupNameLocation')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('azuread_1_Connection_Name'))]"
      ],
      "tags": {
        "displayName": "GetGroupName"
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Get_group": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuread']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v1.0/groups/@{encodeURIComponent(triggerOutputs()['queries']['groupId'])}"
              },
              "runAfter": {}
            },
            "Response": {
              "type": "Response",
              "kind": "http",
              "inputs": {
                "statusCode": 200,
                "body": "@body('Get_group')"
              },
              "runAfter": {
                "Get_group": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {},
                "method": "GET"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuread": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetGroupNameLocation'), '/managedApis/', 'azuread')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('azuread_1_Connection_Name'))]",
                "connectionName": "[parameters('azuread_1_Connection_Name')]"
              }
            }
          }
        }
      }
    },
    {
      "name": "[parameters('GetGroupUsersName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('GetGroupUsersLocation')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('azuread_1_Connection_Name'))]"
      ],
      "tags": {
        "displayName": "GetGroupUsers"
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Get_group_members": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuread']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v1.0/groups/@{encodeURIComponent(triggerOutputs()['queries']['groupId'])}/members"
              },
              "runAfter": {}
            },
            "Response": {
              "type": "Response",
              "kind": "http",
              "inputs": {
                "statusCode": 200,
                "body": "@body('Get_group_members')"
              },
              "runAfter": {
                "Get_group_members": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {},
                "method": "GET"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuread": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetGroupUsersLocation'), '/managedApis/', 'azuread')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('azuread_1_Connection_Name'))]",
                "connectionName": "[parameters('azuread_1_Connection_Name')]"
              }
            }
          }
        }
      }
    },
    {
      "name": "[parameters('GetGroupsAndPlansName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('GetGroupsAndPlansLocation')]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('azuread_1_Connection_Name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]"
      ],
      "tags": {
        "displayName": "GetGroupsAndPlans"
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Initialize_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "GroupPlan",
                    "type": "array"
                  }
                ]
              },
              "runAfter": {}
            },
            "Get_groups_of_a_user_(V2)": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuread']['connectionId']"
                  }
                },
                "method": "post",
                "body": {
                  "securityEnabledOnly": false
                },
                "path": "/v2/v1.0/users/@{encodeURIComponent(triggerOutputs()['queries']['userName'])}/getMemberGroups"
              },
              "runAfter": {
                "Initialize_variable": [
                  "Succeeded"
                ]
              }
            },
            "For_each": {
              "type": "Foreach",
              "foreach": "@body('Get_groups_of_a_user_(V2)')?['value']",
              "actions": {
                "Get_group": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuread']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "/v1.0/groups/@{encodeURIComponent(items('For_each'))}"
                  },
                  "runAfter": {}
                },
                "List_plans_for_a_group": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['planner']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "/v1.0/groups/@{encodeURIComponent(body('Get_group')?['id'])}/planner/plans"
                  },
                  "runAfter": {
                    "Get_group": [
                      "Succeeded"
                    ]
                  }
                },
                "For_each_2": {
                  "type": "Foreach",
                  "foreach": "@body('List_plans_for_a_group')?['value']",
                  "actions": {
                    "Append_to_array_variable": {
                      "type": "AppendToArrayVariable",
                      "inputs": {
                        "name": "GroupPlan",
                        "value": "@{items('For_each_2')?['title']},@{items('For_each_2')?['id']},@{body('Get_group')?['displayName']},@{body('Get_group')?['id']}"
                      },
                      "runAfter": {}
                    }
                  },
                  "runAfter": {
                    "List_plans_for_a_group": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "runAfter": {
                "Get_groups_of_a_user_(V2)": [
                  "Succeeded"
                ]
              }
            },
            "Response": {
              "type": "Response",
              "kind": "http",
              "inputs": {
                "statusCode": 200,
                "body": "@variables('GroupPlan')"
              },
              "runAfter": {
                "For_each": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {},
                "method": "GET"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuread": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetGroupsAndPlansLocation'), '/managedApis/', 'azuread')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('azuread_1_Connection_Name'))]",
                "connectionName": "[parameters('azuread_1_Connection_Name')]"
              },
              "planner": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('GetGroupsAndPlansLocation'), '/managedApis/', 'planner')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('planner_1_Connection_Name'))]",
                "connectionName": "[parameters('planner_1_Connection_Name')]"
              }
            }
          }
        }
      }
    }
  ]
}